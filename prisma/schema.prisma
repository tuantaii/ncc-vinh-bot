// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator kysely {
  provider     = "prisma-kysely"
  output       = "../src/db"
  fileName     = "types.ts"
  enumFileName = "enums.ts"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model MessageLogs {
  id             Int      @id @default(autoincrement())
  messageId      String
  senderAvatar   String
  senderName     String
  senderId       String
  senderUsername String
  content        Json
  createdAt      DateTime @default(now())
  channelId      String
  clanId         String
  clanAvatar     String
  clanName       String
  clanUsername   String
  channelLabel   String   @default("")
  displayName    String   @default("")
}

model TimesheetToken {
  id        Int      @id @default(autoincrement())
  userId    String
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime

  @@unique([userId])
}

model UserBalance {
  id        Int      @id @default(autoincrement())
  userId    String
  username  String
  balance   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
  @@index([userId])
}

model TransactionLogs {
  id            Int              @id @default(autoincrement())
  userId        String
  amount        Int
  transactionId String           @default(uuid())
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  type          ETransactionType @default(DEPOSIT)

  @@unique([transactionId])
  @@index([userId, transactionId])
}

enum ETransactionType {
  DEPOSIT
  WITHDRAW
}

model TransactionSendLogs {
  id        Int      @id @default(autoincrement())
  userId    String
  amount    Int
  toUserId  String
  note      String   @default("kbb")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

enum EMessageRole {
  system
  user
  assistant
}

enum ETransactionSendStatus {
  PLAY_BlACK_JACK
}

model BlackJackGame {
  id              Int             @id @default(autoincrement())
  hostId          String
  hostName        String
  guestId         String
  guestName       String
  cost            Int             @default(0)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  status          EJackGameStatus @default(WAITING)
  channelId       String
  messageId       String
  clanId          String
  isPublicChannel Boolean         @default(false)
  mode            String          @default("2") //2,4
  remainingCards  Int[]
  hostCards       Int[]
  guestCards      Int[]
  turnOf          String?
  isHostStand     Boolean         @default(false)
  isGuestStand    Boolean         @default(false)

  metadata Json?
}

model BlackJackGameLogs {
  id     Int    @id @default(autoincrement())
  gameId Int
  userId String
  card   String
}

enum EJackGameStatus {
  WAITING
  PLAYING
  ENDED
}
